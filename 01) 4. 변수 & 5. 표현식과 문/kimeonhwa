Js 딥다이브



4장

4-1 변수란 무엇인가? 왜 필요한가?

### JS 엔진이 `10+20` 이라는 식을 해석하는 과정

1) 10과 20이 메모리 상의 임의의 위치에 저장
2) cpu가 이 값을 읽어 연산 수행
3) 연산 결과인 30을 메모리에 저장

문제점 : 연산 결과인 30을 재사용하지 못하고, 해당 값에 접근하고 싶으면 메모리 주소를 통해 직접 접근해야 한다 

-> 재사용이 가능하도록 변수라는 메커니즘 도입



### 변수

- 도입 배경 : 메모리에 직접 접근하지 않고 값을 재사용하기 위해 만들어짐
- 의미 : 값의 위치를 가리키는 상징적인 이름

```js
var result = 10 + 20; // 할당
console.log(result); // 참조
```



> 변수란 값의 위치를 가리키는 상징적인 이름이고, 직접 메모리에 접근하지 않고 값을 재활용할 수 있기에 사용한다 



4-2 식별자

- 메모리 주소에 붙이 이름
- 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다
- 코드내에서 선언을 통해 js 엔진에게 식별자의 존재를 알린다 



4-3 변수 선언

- 변수를 선언한다 = 메모리 공간을 확보하고, 변수이름과 확보된 메모리 공간의 주소를 연결
- Var, let , const 키워드를 통해 
- 변수 선언 이후, 변수에 값을 할당하지 않아도 암묵적으로 undefined 라는 값이 할당되어 초기화 된다 



### JS 엔진 의 변수 선언 단계

1. 선언 단계 : 변수 이름을 등록
2. 초기화 단계 : 값을 저장하기 위한 메모리 공간을 확보, 암묵적으로 undefined라는 값을 할당
3. var 키워드를 사용한다면 1,2번이 동시에 수행된다 

> 변수를 선언할 때는 키워드를 통해서 선언





4-4 변수 선언의 실행 시점과 변수 호이스팅

```js
console.log(score);
var score;
```

첫번째 줄에서 참조 에러가 나지 않는 이유

- 호이스팅에 의해 변수 선언문이 최상단으로 끌어올라오는 것처럼 동작하기 때문

> var 키워드를 사용하면 호이스팅에 의해 변수 선언문이 최상단으로 끌어올라오는 것처럼 동작





4-5 값의 할당

```js
var score; //변수 선언 -> 런타임 이전 실행
score = 100; //값의 할당 -> 런타임 이후 실행

var score = 100; //단축 표현
```





4-7 값의 재할당

재할당 : 현재 변수에 저장된 값을 버리고 새로운 값을 저장

const 키워드는 재할당이 금지 (상수 취급)

재할당 시 메모리 공간 안의 값을 변경하는 것이 아니라 새로운 메모리 공간을 확보 후, 그 메모리 공간에 값을 저장

### 가비지 콜렉터

- 어떠한 식별자와도 연결이 되어있지 않은 메모리상의 공간들을 정리

### 매니지드 언어

- js 는 메모리 관리를 언어 차원에서 담당



4-7 식별자 네이밍 규칙

1. 특수문자를 제외한 문자, 숫자, _ , $ 를 포함할 수 있음
2. 숫자로 시작할 수 없음
3. 예약어 사용 불가

### 네이밍 컨벤션

- 변수, 함수 -> 카멜케이스(firtName)
- 생성자 함수, 클래스 -> 파스칼 케이스(FirstName)
